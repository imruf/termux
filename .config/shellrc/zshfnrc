#!/bin/sh

fzf_to() {
  local files
  if [[ -z $string ]]
  then
    printf "Search File:>_ "
    read string
  fi
  files=$(find . -type f 2> /dev/null | fzf +m)
  if [[ -n $files ]]
  then
     xdg-open -- $files
     print -l $files[1]
  fi
} 

fzf_file() {
  local files
  if [[ -z $string ]]
  then
    printf "Search File:>_ "
    read string
  fi
  files=(${(f)"$(locate -Ai -0 $string | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})

  if [[ -n $files ]]
  then
     nvim -- $files
     print -l $files[1]
  fi
}


fzf_cd() {
  local file
  if [[ -z $string ]]
  then
    printf "Search Dir:>_ "
    read string
  fi

  file="$(locate -Ai -0 $string | grep -z -vE '~$' | fzf --read0 -0 -1)"

  if [[ -n $file ]]
  then
     if [[ -d $file ]]
     then
        z -- $file
     else
        z -- ${file:h}
     fi
  fi
}

fzf_kill() {
    local pid 
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi  

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi  
}

fzf_history() 
        { 
            zle -I; eval $(history | fzf -e +i +s | sed 's/ *[0-9]* *//') ; 
        }; 
    zle -N fzf_history;


#Function
#  fzf_file() 
#          { 
#              zle -I; FILE=$(find ~/ -type f 2> /dev/null | fzf +m) && vim "$FILE" ; 
#          }; 
#      zle -N fzf_file;
#  
#  fzf_cd() 
#          { 
#              zle -I; DIR=$(find ~/ -type d 2> /dev/null | fzf +m) && cd "$DIR" ; 
#          }; 
#      zle -N fzf_cd;
#  
#  fzf_history() 
#          { 
#              zle -I; eval $(history | fzf -e +i +s | sed 's/ *[0-9]* *//') ; 
#          }; 
#      zle -N fzf_history;
#  
#  fzf_kill() 
#          { 
#              zle -I; ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9} ; 
#          }; 
#      zle -N fzf_kill;
#  
#  fzf_sr() 
#          { 
#              term="$*"
#              zle -I; elvi=$(sr -elvi | awk -F'-' '{print $1}' | sed '/:/d' | awk '{$1=$1};1' | fzf +m) && sr "$elvi" "$term" ; 
#          }; 
#      zle -N fzf_sr;
#  
#  fzf_srbr() 
#         { 
#               zle -I; bms=$(cat ~/.config/surfraw/bookmarks | sed '/^$/d' | sort -n | fzf -e) && sr "$bms" ;
#         };
#      zle -N fzf_srbr;

# services
ttm_url_shorten() {
            url="$*"
            zle -I; curl -F shorten="$url" https://ttm.sh ; 
       };
     zle -N ttm_url_shorten;

online_dic() {
            phrase="$*"
            zle -I; curl dict.org/d:"$phrase" ; 
       };
     zle -N online_dic;

online_man() {
            cheat="$*"
            zle -I; curl cheat.sh/"$cheat" ; 
       };
     zle -N online_man;

ftp_server() {
        ip="$*"
        zle -I; busybox tcpsvd -vE "$ip" 8021 busybox ftpd -w $HOME/storage/shared
       };
     zle -N ftp_server;

artix_ssh() {
            ip="$*"
            zle -I; ssh masud@192.168.31.13 ;
       };
     zle -N artix_ssh;


#Transmission
tsmcc() {
        transmission-remote -l | grep 100% | grep Done | \
        awk '{print $1}' | xargs -n 1 -I % transmission-remote -t % -r ;} #clear completed
tsm() { transmission-remote --list ;}
	# numbers of ip being blocked by the blocklist
	# credit: smw from irc #transmission-status
tsmcnt() { echo "Blocklist rules:" $(curl -s --data \
	'{"method": "session-get"}' localhost:9091/transmission/rpc -H \
	"$(curl -s -D - localhost:9091/transmission/rpc | grep X-Transmission-Session-Id)" \
	| cut -d: -f 11 | cut -d, -f1) ;} #tsm-count
# demo video: http://www.youtube.com/watch?v=TyDX50_dC0M
tsmbl() { $PATH_SCRIPTS/blocklist.sh ;}		# update blocklist
tsmdmn() { transmission-daemon ;} #tsm-daemon
tsmquit() { killall transmission-daemon ;} #killall
tsmaspd() { transmission-remote --alt-speed ;}	# limit bandwidth
tsmanspd() {	transmission-remote --no-alt-speed ;}	# dont limit bandwidth
tsmadd() { transmission-remote --add "$1" ;} #add torrent
tsmaskp() { transmission-remote -t"$1" --reannounce ;} #ask peers
tsmstop() { transmission-remote -t"$1" --stop ;}		# <id> or all
tsmstart() { transmission-remote -t"$1" --start ;}		# <id> or all
tsmpurge() { transmission-remote -t"$1" --remove-and-delete ;} # delete data also
tsmdel() { transmission-remote -t"$1" --remove ;}		# leaves data alone
tsminfo() { transmission-remote -t"$1" --info ;} #info
tsmspeed() { while true;do clear; transmission-remote -t"$1" -i | grep Speed;sleep 1;done ;}


n ()
{
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}
